/*tokitsukaze有n个数，需要按顺序把他们插入哈希表中，哈希表的位置为0到n-1。
插入的规则是：
刚开始哈希表是空的。
对于一个数x，在哈希表中，如果(x mod n)的位置是空的，就把x放在(x mod n)的位置上。如果不是空的，就从(x mod n)往右开始找到第一个空的位置插入。若一直到n-1都不是空的，就从位置0开始继续往右找第一个空的位置插入。
因为哈希表总共有n个空位，需要插入n个数，所以每个数都能被插入。
现在tokitsukaze想知道把这n个数按顺序插入哈希表后，哈希表中的每个位置分别对应的是哪个数。

Input
第一行包含一个正整数n(1≤n≤10^6)。
第二行包含n个非负整数x(0≤x≤10^9)，这些数按从左到右的顺序依次插入哈希表。

Output
输出一行，n个数，第i个数表示哈希表中位置为i所对应的数。(0≤i≤n-1)

Sample Input
4
1 2 6 5
4
3 0 7 11
Sample Output
5 1 2 6
0 7 11 3
Hint
第一个样例：
插入1时，1 mod 4=1，是空的，在位置1插入。
插入2时，2 mod 4=2，是空的，在位置2插入。
插入6时，6 mod 4=2，不是空的，找到下一个空的位置为3，所以在位置3插入。
插入5时，5 mod 4=1，不是空的，找到下一个空的位置为0，所以在位置0插入。
第二个样例：
插入3时，3 mod 4=3，是空的，在位置3插入。
插入0时，0 mod 4=0，是空的，在位置0插入。
插入7时，7 mod 4=3，不是空的，找到下一个空的位置为1，所以在位置1插入。
插入11时，11 mod 4=3，不是空的，找到下一个空的位置为2，所以在位置2插入。*/

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll sum = 0;
ll flag = 0;

set<ll> rt;
ll pre[1000007];
void init(int n)
{
    for (int i = 0; i < n; i++)
    {
        pre[i] = i;
    }
}
int find(int x)
{
    if (pre[x] == x)
        return x;
    return pre[x] = find(pre[x]);
}

int main()
{

    ll n;
    while (cin >> n)
    {

        ll ans[n];
        init(n);
        for (ll i = 0; i < n; i++)
        {
            ll x;
            cin >> x;
            ll m = x % n;
            ans[find(m)] = x;
            pre[find(m)] = find(pre[find(m) + 1]);
        }
        for (ll i = 0; i < n; i++)
        {
            if(flag==0)
            {
                cout << ans[i];
                flag = 1;
            }else
            {
                cout << ' ' << ans[i];
            }
        }
        cout << '\n';
        flag = 0;
    }
    return 0;
}
