/*新的学期，大家又要开始开始校园跑了，Lntano学长也是如此。众所周知，每次校园跑，我们都要先按顺序经过三个记录点，这样成绩才会被视为有效。作为一名强大的acmer，Lntano学长并不满足于只经过三个记录点，他希望能用最短的路径经过n个记录点。每次校园跑时，Lntano都会从记录点1处出发，并按照1->2,2->3,...n-1->n的顺序到达所有记录点。这些记录点都处在同一条直线上，可以看成一个排列。每次从一个记录点到另一个记录点时，视为经过了中间的所有点一次，包括起点和终点。Lntano学长想知道在跑步过程中，自己经过哪个记录点的次数最多。排列：长度为n的排列由1-n这些数字组成，且每个数字只出现一次。

Input
第一行输入一个t，代表t组数据。（1<=t<=1e5）
接下来t组样例，第一行一个n代表排列长度，第二行给出一个长度为n的排列，代表每个记录点的序号。(2<=n<=1e5)
保证Σn<=1e6。
Output
t行输出，每行一个数字，代表经过次数最多的记录点的序号。若有几个经过次数一样多的记录点，就输出序号最小的。

Sample Input
3
5
2 1 5 3 4
4
4 3 1 2
5
1 2 3 4 5
Sample Output
3
1
2
Hint
Sample的第一组样例：按照序号1->2,2->3,3->4,4->5的顺序，第一步经过了序号2,1，第二步经过了序号2,1,5,3，第三步经过了序号3,4，第四步经过了序号5,3,4。序号2经过了2次，序号1经过了2次，序号5经过了2次，序号3经过了3次，序号4经过了2次，序号3经过的次数最多，因此输出3。

第二组样例：经过的次数分别是1,2,2,2，因此输出序号1。

第三组样例：经过的次数分别是1,2,2,2,1，因此输出序号2。
PS：如果time limit exceed的话，去看看第二场讲座的ppt吧，或许会有帮助哦！
PS：Qfish冒着生命危险传达来的提示，这题用到了差分算法。*/



#include <bits/stdc++.h>
using namespace std;
#define ll long long
ll flag=0;
ll sum=0;
ll t;
ll a;
ll ma=-1;
set<ll> maa;
vector<ll> shu;
ll yu[1000000];
ll c[1000000];
ll w[1000000];
int main()
{
    ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    cin >> t;
    while(t--)
    {
        memset(yu,0,sizeof(yu));
        memset(c,0,sizeof(c));
        memset(w,0,sizeof(w));
        ll mi=1e9+7;
        cin >> a;
        for(ll i=0;i<=a-1;i++)
        {
            ll q;
            cin >> q;
            shu.push_back(q);
           
        }
        for(ll i=0;i<=a-1;i++)
        {
            ll wei=shu[i];
            c[wei]=i+1;
        }
        for(ll i=1;i<a;i++)
        {
            ll e,s;
            s=min(c[i],c[i+1]);
            e=max(c[i],c[i+1]);
            yu[s]+=1;
            yu[e+1]-=1;
        }
        for(ll i=1;i<=a;i++)
        {
            w[i]=sum+yu[i];
            sum+=yu[i];
            if(w[i]==ma)
            {
                maa.insert(i);
            }else if(w[i]>ma)
            {
                ma=w[i];
                maa.clear();
                maa.insert(i);
            }
        }
        sum=0;
        for(auto it :maa)
        {
            if(shu[it-1]<mi)
            {
                mi=shu[it-1];
            }
        }
        cout << mi << endl;
        maa.clear();
        ma=-1;
        shu.clear();
        
        

    }
    return 0;
}
