#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
ull base = 131;
ll p[1000001],f[1000001],r[1000001];
ll find(int l, int r)
{
    return f[r] - (f[l - 1] * p[r - l + 1])  ;
}
ll find2(int l, int q)
{
    return r[q] - (r[l - 1] * p[q - l + 1])  ;
}
map<ll,ll> ha;
string a, s;
int main()
{
    //ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    ll t;
    cin >> t;
    while (t--)
    {
        ha.clear();
        ll num = 0;
        cin >> s >> a;
        ll l = s.size();
        s = s + s;
        f[0] = 0, p[0] = 1;
        r[0] = 0;
        for (int i = 1; i <= s.size(); i++) // 记录要找的字符串的哈希
        {                                   // 向右移动一位
            r[i] = (r[i - 1] * 131 + (s[i - 1] )) ;
        }
        for (int i = 1; i <= a.size(); i++)
        {
            f[i] = (f[i - 1] * 131 + (a[i - 1] )) ;
            p[i] = p[i - 1] * 131 ;
        }
        for (int i = 1; i <= l + 1; i++)
        {
            ha[find2(i, i + l - 1)] = 1;
        }
        
        for (int j = 1; j <= a.size() - l + 1; j++) // 遍历查找
        {
            if (ha[find(j, j + l - 1)] == 1)
                num++;
        }
        cout << num << '\n';
        
    }
}
